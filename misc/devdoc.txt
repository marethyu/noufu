Noufu devdoc

Stage 1: Pass Blargg's CPU tests (complete)
Stage 2: Refactor code (make seperate files for each class) and implement PPU to run Boot rom (don't forgot to make a Makefile) (complete)
Stage 3: Pass other Blargg's tests (mem_timing.gb, mem_timing2.gb, halt_bug.gb)
Stage 4: Make sure it can run Tetris without problems (complete)
Stage 5: Implement a seperate class for cartridge with basic MBC support and make sure it can run Mario (complete)

debug cmds:
step ([x]) - step cpu for x times (x=1 is default)
quit - quit debugger
print status [all cpu intman timer gpu joypad]
print mem [addr] - print value in mem bus at addr
print mem range [start] [end] - print memory values from start to end
print ins - print current instruction
edit reg8 [r8] [v] - change the value of register r8 with v
edit flag [f] [v] - change the value of flag f with v
edit reg16 [r16] [v] - change the value of register r16 with v
edit mem [addr] [v] - change the value of mem addr with v
blargg - display serial output results
run x - run till PC=x (x is hex)
reload-rom

TODO:
print rom-info - print basic rom information
save-state fname - save current emulator state to fname
load-state fname - load current emulator state from fname

notes: both addr and v are hex

emulator modes:
- gui - win32 + sdl2 with logging system (complete)
- cli - cli debugger with sdl windows (view current screen state, vram/oam state, etc.)

blargg tests passed:
- 01-special.gb
- 02-interrupts.gb**
- 03-op sp,hl.gb
- 04-op r,imm.gb
- 05-op rp.gb
- 06-ld r,r.gb
- 07-jr,jp,call,ret,rst.gb
- 08-misc instrs.gb
- 09-op r,r.gb
- 10-bit ops.gb
- 11-op a,(hl).gb
- instr_timing.gb

**halt is taking too long... perhaps it will be solved after PPU implementation is complete...

when to start making a savefile?

before the oam search phase starts and after m_Emulator->Update()かも

emulator savestate file format:

Note: 2-byte data is stored in big endian format

byte 1: cartridge global checksum

CPU:
    uint8_t reg8[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint16_t *reg16 = (uint16_t *) reg8;
    uint16_t PC;
    int ei_delay_cnt; // counter for ei instruction delay
    bool bHalted;
    bool haltBug;

MemController:
    std::array<uint8_t, 0x2000> m_VRAM;
    std::array<uint8_t, 0x4000> m_WRAM;
    std::array<uint8_t, 0xA0> m_OAM;
    std::array<uint8_t, 0x7F> m_HRAM;
    bool inBootMode;
    std::array<uint8_t, 0x80> m_IO;
    uint8_t IE;

InterruptManager:
    bool m_IME;
    int haltMode;

Timer:
    int m_Freq;
    int m_Counter;
    uint16_t DIV;

PPU: (TODO add more fields)
    bool bResetted;                         // true if LCDC.7 is 0, false otherwise
    int WLY;                                // window internal line counter

JoyPad:
    uint8_t joypad_state;

Emulator:
    int m_TotalCycles; // T-cycles
    int m_PrevTotalCycles;